/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package asthachamma.model;
import asthaChamma.model.Board;
import asthaChamma.model.Dice;
import asthaChamma.model.Pawn;
import asthaChamma.controller.GameController;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Arrays;
public class ProjectTest 
{
    @Test
	public void safePositionCheck()
	{
		Board b = new Board();
		boolean s = b.checkSafePositions(3, 1);
		assertTrue(s);
	}
    
    @Test
	public void unSafePositionCheck()
	{
		Board b = new Board();
		boolean s = b.checkSafePositions(3, 2);
		assertFalse(s);
	}
	
	@Test
	public void intialPawnPositionsCheck()
	{
		ArrayList<String> arrList = new ArrayList<String>();
		arrList.add("00");
		arrList.add("00");
		arrList.add("00");
		arrList.add("00");
		Board b1 = new Board();
		ArrayList<String> boardList = b1.getPlayersPawnsPositions();
		boolean flag = true;
		//comparing every element
		for (int i =0;i < 4;i++)
		{
			if(! arrList.get(i).equals(boardList.get(i))) 
			{
				flag = false;
				break;
			}
		}
		assertTrue(flag);
	}
	
	@Test
	public void intialPawnPositionsNegativeCheck()
	{
		ArrayList<String> arrList = new ArrayList<String>();
		arrList.add("00");
		arrList.add("00");
		arrList.add("01");
		arrList.add("00");
		Board b1 = new Board();
		ArrayList<String> boardList = b1.getPlayersPawnsPositions();
		boolean flag = true;
		//comparing every element
		for (int i =0;i < 4;i++)
		{
			if(! arrList.get(i).equals(boardList.get(i))) 
			{
				flag = false;
				break;
			}
		}
		assertFalse(flag);
	}
	
	
	@Test
	public void placePawnCheck()
	{
		Board b3 = new Board();
		GameController g = new GameController(b3);
		b3.placePawn(1, 1, b3.getFirstPlayer(), b3.getFirstPlayer().getPawnA());
		boolean k2;
		int [][] position = new int [1][2]; 
		position[0][0] = 1;
		position[0][1] = 1;
		int [][] position1 = new int [1][2];
		position1 = b3.getFirstPlayer().getPawnA().getPawnPosition();
		for (int i = 0; i < position.length; i++) 
		{
			if (!Arrays.equals(position[i], position1[i]))
			{
				k2 = false;
			}
		}
		k2 = true;
		assertEquals(k2,true);
	}
	
	@Test
	public void sizeCheck()
	{
		Board b2 = new Board();
		boolean val1;
		int k = b2.getSize();
		if(k==5)
		{
			val1 = true;
		}
		else
		{
			val1 = false;
		}
		assertEquals(val1,true);
	}
	
	@Test
	public void knockOutCheck()
	{
		Board b4 = new Board();
		b4.getFirstPlayer().getPawnA().updatePawnPosition(1,1);
		b4.getSecondPlayer().getPawnA().updatePawnPosition(1,1);
		String p = "11";
		b4.KnockOutCheck(b4.getFirstPlayer().getPawnA(), p);
		assertEquals(b4.getFirstPlayer().getKillingSpirit(),true);
	}
	
	@Test
	public void knockOutCheck2()
	{
		Board b4 = new Board();
		b4.getSecondPlayer().getPawnA().updatePawnPosition(1,1);
		b4.getFirstPlayer().getPawnA().updatePawnPosition(1,1);
		String p = "11";
		b4.KnockOutCheck(b4.getSecondPlayer().getPawnA(), p);
		assertEquals(b4.getSecondPlayer().getKillingSpirit(),true);
	}
	
	@Test
	public void iscompletedcheck()
	{
		Board b3 = new Board();
		GameController g = new GameController(b3);
		b3.placePawn(3, 3, b3.getFirstPlayer(), b3.getFirstPlayer().getPawnA());
		b3.placePawn(3, 3, b3.getFirstPlayer(), b3.getFirstPlayer().getPawnB());
		assertTrue(b3.isCompleted());		
	}
	
	@Test
	public void iscompletedcheck2()
	{
		Board b3 = new Board();
		GameController g = new GameController(b3);
		b3.placePawn(3, 3, b3.getSecondPlayer(), b3.getSecondPlayer().getPawnA());
		b3.placePawn(3, 3, b3.getSecondPlayer(), b3.getSecondPlayer().getPawnB());
		assertTrue(b3.isCompleted());		
	}
	
	@Test
	public void updatePawnPositionMethodcheck()
	{
		int[][] position = new int [1][2];
		position[0][0] = 0;
		position[0][1] = 0;
		Board b5 = new Board();
		b5.getFirstPlayer().getPawnA().updatePawnPosition(1,2);
		boolean m;
		int [][] position1 = b5.getFirstPlayer().getPawnA().getPawnPosition();
		for (int i = 0; i < position.length; i++) 
		{
			if (!Arrays.equals(position[i], position1[i]))
			{
				m = false;
			}
		}
		m = true;
		assertEquals(m,true);
	}	
	
	
	@Test
	public void getRandomDiceCheck()
	{
		Dice dice  = new Dice("Level-1");
		int num = dice.getRandomDiceValue();
		boolean flag = false;
		int[] valuesArray ={1,2,3,4,8};
		ArrayList<Integer> arrList  = new ArrayList<Integer>();
		for (int element : valuesArray)
		{
			arrList.add(element);
		}
		flag = arrList.contains(num);
		assertTrue(flag);
	}
}
